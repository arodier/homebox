---

# Install the most required packages
- name: Update packages cache if older than 1h
  apt:
    cache_valid_time: 3600
    update_cache: true

# Install swap if not enough memory available
- name: Install memory swap package
  when: ansible_memtotal_mb < 2048
  apt:
    name: dphys-swapfile
    state: present

- name: Create a homebox directory to store any specific configuration
  register: homebox_dir
  file:
    path: /etc/homebox
    state: directory
    mode: '0755'

- name: Create the configuration file that defines paths to exclude for backup
  template:
    src: backup-exclude
    dest: /etc/homebox/backup-exclude

- name: Create the main configuration file for other services
  template:
    src: main.cf
    dest: /etc/homebox/main.cf

- name: Upgrade the distribution the first time this script is run
  when: homebox_dir.changed
  apt:
    upgrade: true

- name: Install required packages
  apt:
    name: "{{ system_required }}"
    state: present

- name: Remove packages to exclude
  apt:
    name: "{{ system_excluded }}"
    state: absent
    purge: yes

# Update packages cache, and install any security update
- name: Update packages cache and install security updates
  register: packages_cache
  apt:
    update_cache: yes
    cache_valid_time: 3600

- name: Upgrade the distribution, and install security updates if needed
  when: packages_cache.changed
  apt:
    upgrade: yes

- name: Create a random password for file encryption on the server
  no_log: true
  set_fact:
    system_key: '{{ lookup("password", "{{ encryption.systemKeyParams }}") }}'

- name: Create a passphrase to encrypt system files
  tags: encryption
  template:
    src: system-key
    dest: /etc/homebox/system-key
    owner: root
    group: root
    mode: '0400'

- name: Install the dictionnaries
  tags: lang
  apt:
    name: 'aspell-{{ dict.id }}'
    state: present
  with_items: '{{ dictionaries }}'
  loop_control:
    loop_var: dict

# If IPv6 is not needed, disable it entirely
- name: Disable IPv6 if not needed
  sysctl:
    name: '{{ entry_name }}'
    value: '{{ 0 if ipv6_used else 1 }}'
  with_items:
    - net.ipv6.conf.all.disable_ipv6
    - net.ipv6.conf.default.disable_ipv6
  loop_control:
    loop_var: entry_name

# SSHFP (fingerprints) are only active with DNSSEC
- name: Create the SSHFP records for bind
  when: bind.install and bind.dnssec.active
  tags: bind
  register: ssh_keygen
  changed_when: false
  shell: >-
    set -o pipefail ;
    ssh-keygen -r {{ network.domain }} | sed 's/ /. /'
  args:
    executable: /bin/bash

# - name: Create a composition directory for bind
#   when: bind.install
#   tags: bind
#   file:
#     path: /etc/homebox/dns-entries.d/
#     state: directory

# - name: Add the SSHFP records
#   when: bind.install and bind.dnssec.active
#   tags: bind
#   template:
#     src: sshfp.bind
#     dest: /etc/homebox/dns-entries.d/01-sshfp.bind

# LUKS management
- name: Install Yubikey key decryption
  when: security.luks.yubikey
  tags: luks
  apt:
    name: yubikey-luks
    state: present

- name: Add a script to register the Yubikey
  when: security.luks.yubikey
  tags: luks
  copy:
    src: yubikey-enroll.sh
    dest: /usr/local/sbin/yubikey-enroll.sh
    mode: '0700'

- name: Activate some aliases in bashrc
  template:
    src: bashrc
    dest: /root/.bashrc

- name: Create the folder for renewal hooks
  file:
    path: /etc/letsencrypt/renewal-hooks/deploy
    state: directory

- name: Use python3 interpreter by default
  alternatives:
    name: python
    link: /usr/bin/python
    path: /usr/bin/python3
