---

- name: Install the packages required for ejabberd
  apt:
    name: ejabberd
    state: present

- name: Install graphics library for thumbnails generation
  apt:
    name: '{{ pkgs }}'
    state: '{{ ejabberd.http_upload.thumbnail | ternary("present", "absent") }}'
  vars:
    pkgs:
      - graphicsmagick
      - graphicsmagick-imagemagick-compat

- name: Copy ejabberd configuration
  notify: Restart ejabberd
  template:
    src: ejabberd.yml
    dest: /etc/ejabberd/ejabberd.yml
    mode: '0600'
    owner: ejabberd
    group: ejabberd

################################################################################
# At this point, the certificates should have been created already #############
# in order to have SSL and TLS encryption activated.                           #

- name: Copy the certificate renewal hook
  tags: scripts
  copy:
    src: renewal-hook.sh
    dest: /etc/letsencrypt/renewal-hooks/deploy/40-ejabberd.sh
    mode: '0700'

#
# End of TLS / SSL Configuration ###############################################


# File upload configuration ===================================================
- name: Create the jabber site frontend configuration file
  tags: jabber
  notify: Restart nginx
  template:
    src: nginx.conf
    dest: '/etc/nginx/sites-available/xmpp.{{ network.domain }}.conf'
    owner: root
    group: root
    mode: '0644'

- name: Enable nginx site
  tags: jabber
  notify: Restart nginx
  file:
    src: '/etc/nginx/sites-available/xmpp.{{ network.domain }}.conf'
    dest: '/etc/nginx/sites-enabled/xmpp.{{ network.domain }}.conf'
    state: link

- name: Create the http upload directory
  tags: jabber
  file:
    path: /var/www/ejabberd/files
    state: directory
    owner: root
    group: root
    mode: '0755'

- name: Allow the jabber server to write in the folder
  tags: jabber
  acl:
    path: /var/www/ejabberd/files
    entity: ejabberd
    etype: user
    permissions: rwx
    state: present
    default: yes

- name: Create the http upload jabber site
  tags: jabber
  template:
    src: upload-home.html
    dest: /var/www/ejabberd/files/index.html
    owner: root
    group: root
    mode: '0644'

# SQlite database initialisation ==============================================

- name: Copy the database initialisation schema
  copy:
    src: database.sql
    dest: /etc/ejabberd/database.sql
    owner: ejabberd
    group: ejabberd
    mode: '0600'

- name: Create sqlite database for message storage
  shell: >-
    cat /etc/ejabberd/database.sql
    | sqlite3 /var/lib/ejabberd/storage.db
  args:
    creates: /var/lib/ejabberd/storage.db

- name: Ensure the database permissions
  file:
    path: /var/lib/ejabberd/storage.db
    owner: ejabberd
    group: ejabberd
    mode: '0600'

# Firewall configuration ======================================================
- name: Open the firewall for s2c communication
  tags: ufw
  ufw:
    rule: allow
    proto: tcp
    port: '{{ rule.ports }}'
    comment: '{{ rule.comment }}'
  with_items:
    - ports: 5222
      comment: Accept XMPP connections from clients (TLS only)
  loop_control:
    loop_var: rule

- name: Open the firewall for s2s communication when necessary
  tags: ufw
  ufw:
    rule: allow
    proto: tcp
    port: '{{ rule.ports }}'
    comment: '{{ rule.comment }}'
    delete: '{{ not ejabberd.s2s.active }}'
  with_items:
    - ports: 5269
      comment: Accept XMPP connections from other servers
  loop_control:
    loop_var: rule

- name: Open the firewall for s2c communication
  tags: ufw
  ufw:
    direction: out
    rule: allow
    proto: tcp
    port: '{{ rule.ports }}'
    comment: '{{ rule.comment }}'
  with_items:
    - ports: 5222
      comment: Accept XMPP connections from clients (TLS only)
  loop_control:
    loop_var: rule

- name: Open the firewall for s2s communication when necessary
  tags: ufw
  ufw:
    direction: out
    rule: allow
    proto: tcp
    port: '{{ rule.ports }}'
    comment: '{{ rule.comment }}'
    delete: '{{ not ejabberd.s2s.active }}'
  with_items:
    - ports: 5269
      comment: Accept XMPP connections from other servers
  loop_control:
    loop_var: rule

# AppArmor configuration ======================================================

- name: Install ejabberdctl AppArmor profile
  tags: security, apparmor
  register: aa_templates
  template:
    src: 'apparmor.d/local/jabber-frontend'
    dest: '/etc/apparmor.d/local/nginx-jabber-frontend'

- name: Install ejabberdctl AppArmor profile
  tags: security, apparmor
  register: aa_templates
  template:
    src: 'apparmor.d/usr.sbin.ejabberdctl'
    dest: '/etc/apparmor.d/usr.sbin.ejabberdctl'

- name: Activate AppArmor profiles
  when: aa_templates.changed
  tags: security, apparmor
  notify: Restart AppArmor service
  command: 'aa-enforce usr.sbin.ejabberdctl'

- name: Check if AppArmor nginx configuration already contains the line
  register: line_found
  tags: facts,apparmor
  shell: >-
    grep -c 'include <local/nginx-jabber-frontend>'
    /etc/apparmor.d/usr.sbin.nginx
  changed_when: false
  failed_when: false

- name: Add ejabberd AppArmor specific configuration
  when: line_found.stdout == '0'
  notify: Restart AppArmor service
  tags: nginx, security, apparmor
  lineinfile:
    path: /etc/apparmor.d/usr.sbin.nginx
    line: '  #include <local/nginx-jabber-frontend>'
    insertbefore: '# End of local includes for homebox'

# Create entries for the DNS server ===========================================
- name: Generate DNS records for bind
  tags: bind
  when: bind.install
  template:
    src: 50-jabber.bind
    dest: /etc/homebox/dns-entries.d/50-jabber.bind
