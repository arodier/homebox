---

- name: Check if the certificate exists
  register: cert_file
  stat:
    path: /var/lib/lego/certificates/{{ certificate.name }}.{{ network.domain }}.crt

- name: Assert the the certificate exists
  assert:
    that: cert_file.stat.exists

- name: Check if the certificate exists and is valid
  register: cert_check_cmd
  shell: >-
    openssl verify -verbose
    -CAfile {{ acme_root }}
    -untrusted /var/lib/lego/certificates/{{ certificate.name }}.{{ network.domain }}.issuer.crt
    /var/lib/lego/certificates/{{ certificate.name }}.{{ network.domain }}.crt
  changed_when: false

- name: Get the modulus of the certificate
  register: cert_modulus_cmd
  shell: >-
    openssl x509 -noout -modulus
    -in /var/lib/lego/certificates/{{ certificate.name }}.{{ network.domain }}.crt
    | openssl md5
  changed_when: false

- name: Get the modulus of the combine certificate
  register: issuer_modulus_cmd
  shell: >-
    openssl x509 -noout -modulus
    -in /var/lib/lego/certificates/{{ certificate.name }}.{{ network.domain }}.issuer.crt
    | openssl md5
  changed_when: false

- name: Get the modulus of the key
  register: key_modulus_cmd
  shell: >-
    openssl rsa -noout -modulus
    -in /var/lib/lego/certificates/{{ certificate.name }}.{{ network.domain }}.key
    | openssl md5
  changed_when: false

- name: Store the modulus
  set_fact:
    cert_modulus: '{{ cert_modulus_cmd.stdout }}'
    key_modulus: '{{ key_modulus_cmd.stdout }}'

- name: Assert the modulus are the same
  assert:
    that: cert_modulus == key_modulus
