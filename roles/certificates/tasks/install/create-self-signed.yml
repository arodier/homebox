---

- name: Build the certificate FQDN
  when: certificate.name != 'default'
  ansible.builtin.set_fact:
    fqdn: '{{ certificate.name }}.{{ network.domain }}'
    filename: '{{ certificate.name }}.{{ network.domain }}'
  tags: certs

- name: Build the certificate FQDN for the default site
  when: certificate.name == 'default'
  ansible.builtin.set_fact:
    fqdn: '{{ network.domain }}'
    filename: '{{ network.domain }}'
  tags: certs

- name: Build the certificate FQDN for a wildcard
  when: certificate.name == '_'
  ansible.builtin.set_fact:
    fqdn: '*.{{ network.domain }}'
    filename: '_.{{ network.domain }}'
  tags: certs

- name: Create the hook directory
  ansible.builtin.file:
    path: /etc/lego/hooks/{{ filename }}/
    state: directory
    mode: '0700'
  tags: certs

- name: Check if the certificate exists
  register: cert_file
  ansible.builtin.stat:
    path: /var/lib/lego/certificates/{{ filename }}.crt
  tags: certs

- name: Check if the certificate exists and is valid
  when: cert_file.stat.exists
  register: cert_check_cmd
  ansible.builtin.shell: >-
    openssl verify -verbose
    -CAfile /etc/ssl/certs/homebox-temp-ca.pem
    -untrusted /var/lib/lego/certificates/{{ filename }}.issuer.crt
    /var/lib/lego/certificates/{{ filename }}.crt
  ignore_errors: true
  changed_when: false
  tags: certs

- name: Set the initial domain argument
  ansible.builtin.set_fact:
    domains_list: [ 'DNS:{{ fqdn }}' ]
  tags: certs

- name: Build the san list for the command line
  ansible.builtin.set_fact:
    domains_list: '{{ domains_list + [ "DNS:"+san_domain] }}'
  loop: '{{ certificate.san_list | default([]) }}'
  loop_control:
    loop_var: san_domain
  tags: certs

- name: Store the certificate renewal decision
  ansible.builtin.set_fact:
    renew_cert: >-
      {{ cert_recreate
      or not cert_file.stat.exists
      or cert_check_cmd.failed }}
  tags: certs

- name: Create temporary self-signed certificate
  community.crypto.openssl_privatekey:
    path: /var/lib/lego/certificates/{{ filename }}.key
    force: '{{ renew_cert }}'
    owner: root
    group: ssl-cert
    mode: '0640'
  tags: certs

- name: Create certificate signing request (CSR)
  when: renew_cert
  community.crypto.openssl_csr_pipe:
    privatekey_path: /var/lib/lego/certificates/{{ filename }}.key
    common_name: 'DNS:{{ fqdn }}'
    subject_alt_name: '{{ domains_list }}'
  register: ca_csr
  tags: certs

- name: Create self-signed certificate
  register: cert_file
  when: renew_cert
  community.crypto.x509_certificate:
    path: /var/lib/lego/certificates/{{ filename }}.crt
    csr_content: "{{ ca_csr.csr }}"
    privatekey_path: /var/lib/lego/certificates/{{ filename }}.key
    provider: ownca
    ownca_path: /etc/ssl/certs/homebox-temp-ca.pem
    ownca_privatekey_path: /etc/ssl/private/homebox-temp-ca.key
    ownca_not_after: '{{ tmp_duration }}'
    force: '{{ renew_cert }}'
    owner: root
    group: ssl-cert
    mode: '0644'
  tags: certs

- name: Create the issuer file
  when: cert_file.changed
  ansible.builtin.shell: >-
    cat
    /etc/ssl/certs/homebox-temp-ca.pem
    /var/lib/lego/certificates/{{ filename }}.crt
    >/var/lib/lego/certificates/{{ filename }}.issuer.crt
  tags: certs
