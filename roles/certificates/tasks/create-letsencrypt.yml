---

- name: Build the certificate FQDN
  when: certificate.name != 'default'
  set_fact:
    fqdn: '{{ certificate.name }}.{{ network.domain }}'
    filename: '{{ certificate.name }}.{{ network.domain }}'
  tags: certs

- name: Build the certificate FQDN for the default site
  when: certificate.name == 'default'
  set_fact:
    fqdn: '{{ network.domain }}'
    filename: '{{ network.domain }}'
  tags: certs

- name: Build the certificate FQDN for a wildcard
  when: certificate.name == '_'
  set_fact:
    fqdn: '*.{{ network.domain }}'
    filename: '_.{{ network.domain }}'
  tags: certs

- name: Create the hook directory
  file:
    path: /etc/lego/hooks/{{ filename }}/
    state: directory
    mode: 0700
  tags: certs

- name: Check if the certificate exists
  register: cert_file
  stat:
    path: /var/lib/lego/certificates/{{ filename }}.crt
  tags: certs

- name: Check if the certificate exists and is valid
  when: cert_file.stat.exists
  register: cert_check_cmd
  shell: >-
    openssl verify -verbose
    -CAfile {{ acme_root }}
    -untrusted /var/lib/lego/certificates/{{ filename }}.issuer.crt
    /var/lib/lego/certificates/{{ filename }}.crt
  ignore_errors: true
  changed_when: false
  tags: certs

- name: Set the initial domain argument
  set_fact:
    domains_list:
      - "--domains '{{ fqdn }}'"
  tags: certs

- name: Build the san list
  set_fact:
    domains_list: >-
      {{ domains_list + [ "--domains '" + san_domain + "'" ] }}
  loop: '{{ certificate.san_list | default([]) }}'
  loop_control:
    loop_var: san_domain
  tags: certs

- name: Store the certificate renewal decision
  set_fact:
    renew_cert: >-
      {{ cert_recreate
      or not cert_file.stat.exists
      or cert_check_cmd.failed }}
  tags: certs

- name: Create the certificate
  when: renew_cert
  environment:
    PDNS_API_URL: http://127.0.0.1:8081/
    PDNS_API_KEY: '{{ api_key }}'
    http_proxy: 'http://localhost:8888/'
    https_proxy: 'http://localhost:8888/'
  shell: >-
    lego
    --server {{ acme_url }}
    --key-type {{ certificate.type | default("rsa2048") }}
    --email security@{{ network.domain }}
    --dns pdns
    --dns.disable-cp
    --accept-tos
    --path /etc/lego
    {{ domains_list | join(" ") }}
    {{ certificate.pem | default(false) | ternary("--pem", " ") }}
    run
  changed_when: true
  tags: certs

- name: Add the certificate to the list of generated ones
  when: renew_cert
  set_fact:
    updated_certs: "{{ updated_certs | default([]) + [ fqdn ] }}"
  tags: certs

- name: Add monitor settings for prometheus blackbox exporter
  when:
    - certificate.monitor is defined
    - prometheus.install
  lineinfile:
    path: /etc/lego/monitor.list
    line: '{{ certificate.monitor }}'
    create: true
    mode: 0600
  tags: certs
