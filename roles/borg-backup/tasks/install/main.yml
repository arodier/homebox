---

- name: Install required python packages
  ansible.builtin.apt:
    name: '{{ packages }}'
    state: present
  tags: apt

- name: Create the backups mount point root
  ansible.builtin.file:
    path: /mnt/backup
    state: directory
    mode: '0755'

- name: Create the directories to import and export the keys
  ansible.builtin.file:
    path: '{{ path }}'
    state: directory
    mode: '0700'
  loop:
    - /tmp/backup-keys-import
    - /tmp/backup-keys-export
  loop_control:
    loop_var: path

- name: Create the backup config into /etc/homebox
  community.general.ini_file:
    path: '/etc/homebox/backup.ini'
    section: 'alerts'
    option: '{{ option.name }}'
    value: '{{ option.value }}'
    mode: '0600'
  loop:
    - name: from
      value: '{{ backup.alerts.from }}'
    - name: recipient
      value: '{{ backup.alerts.recipient }}'
    - name: jabber
      value: '{{ backup.alerts.jabber }}'
  loop_control:
    loop_var: option
  tags: config

- name: Configure each protocol
  ansible.builtin.include_tasks:
    file: 'install/protocol-{{ location.url | urlsplit("scheme") }}.yml'
  loop: '{{ backup.locations | default([]) }}'
  loop_control:
    loop_var: location
  tags: config

- name: Add the cron entries to backup the home directory
  ansible.builtin.template:
    src: cron-backup-script.sh
    dest: '/etc/cron.{{ location.frequency | default("daily") }}/backup-{{ location.name }}'
    mode: '0700'
  loop: '{{ backup.locations | default([]) }}'
  loop_control:
    loop_var: location
  tags: config

- name: Add the cron entries to check the backup
  register: backup_config
  tags: config
  ansible.builtin.template:
    src: cron-check-script.sh
    dest: '/etc/cron.{{ location.check_frequency | default("weekly") }}/backup-check-{{ location.name }}'
    mode: '0700'
  loop: '{{ backup.locations | default([]) }}'
  loop_control:
    loop_var: location

- name: Create a random passphrase for encrypted backup
  no_log: true
  ansible.builtin.set_fact:
    backup_key: '{{ lookup("password", "{{ encryption.backupKeyParams }}") }}'
  tags: encryption

- name: Save the passphrase
  ansible.builtin.template:
    src: backup-key
    dest: /etc/homebox/backup-key
    owner: root
    group: root
    mode: '0400'
  tags: encryption

- name: Copy the backup script
  ansible.builtin.copy:
    src: backup.py
    dest: '/usr/local/sbin/homebox-backup'
    mode: '0700'
  tags: scripts

- name: Create sync directories to import/export keys
  ansible.builtin.file:
    path: '{{ path }}'
    state: directory
    mode: '0755'
  loop:
    - /tmp/backup-keys-import
    - /tmp/backup-keys-export
  loop_control:
    loop_var: path
  tags: sync

- name: Create the backup keys directory locally if it does not exists
  register: backup_keys_local_directory
  delegate_to: localhost
  ansible.builtin.file:
    path: '{{ backup_directory }}/backup-keys/'
    state: directory
    mode: '0755'
  tags: sync

# If the folder already existed, upload the keys on the server.
- name: Upload the backup encryption keys if they exists
  when: not backup_keys_local_directory.changed
  register: keys_restore
  ansible.posix.synchronize:
    src: '{{ backup_directory }}/backup-keys/'
    dest: /tmp/backup-keys-import/
    mode: push
    owner: false
    group: false
    perms: true
    rsync_opts:
      - '--no-motd'
      - '--quiet'
  tags: sync

- name: Initialise the repository, to test access and retrieve the key
  when: backup.locations is defined and backup.locations != []
  ansible.builtin.include_tasks: init-repository.yml
  loop: '{{ backup.locations | selectattr("restore", "equalto", false) | list }}'
  loop_control:
    loop_var: location
  tags: backup

# In this direction, we should overwrite the keys
# in case new ones have been created
- name: Check if new keys have been copied in the export directory
  register: keys_exported
  ansible.builtin.find:
    paths: /tmp/backup-keys-export/
    patterns: '*.key'
  tags: sync

- name: Retrieve the backup encryption keys on your local machine
  when: keys_exported.matched > 0
  ansible.posix.synchronize:
    mode: pull
    src: /tmp/backup-keys-export/*.key
    dest: '{{ backup_directory }}/backup-keys/'
    perms: true
    rsync_opts:
      - '--no-motd'
      - '--quiet'
  tags: sync

- name: Remove the backup keys directory, we don't need this anymore
  ansible.builtin.file:
    path: '{{ path }}'
    state: absent
  loop:
    - /tmp/backup-keys-import
    - /tmp/backup-keys-export
  loop_control:
    loop_var: path
  tags: sync
