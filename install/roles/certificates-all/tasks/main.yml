---

- name: Create a directory for certificates backup if it does not exists
  tags: cert
  delegate_to: localhost
  file:
    path: '{{ backup_directory }}/certificates/'
    state: directory
    mode: '0700'

# The "--ignore-existing" option skip the files already existing,
# especially the symbolic links in the live folder
# The '--update' option make sure to not overwrite new certificates.
- name: If the certificates have been generated before, copy them on the remote server
  when: (system.devel and devel.acme_server == 'staging') or system.keep_certs
  tags: cert,sync
  synchronize:
    src: '{{ backup_directory }}/certificates/'
    dest: /etc
    owner: no
    group: no
    perms: yes
    rsync_opts:
      - '--no-motd'
      - '--exclude=readme.md'
      - '--exclude=renewal-hooks'
      - '--ignore-existing'
      - '--update'
      - '--chmod=D0755,F0600'

# With certbot < 0.29.0 (eg in stretch, certbot 0.28.0), the initial mode for
# the keys was 0644, although the keys should only be 0600. This task is run on
# exisiting private key files that might have been created by these older
# versions to fix the access rights.
# The chmod command on linux resets the acl mask, limiting access of existing
# ACL rules. The acl module is used to set the access rights without resetting
# the mask, so that any existing ACL rules are preserved.
- name: Get the keys list
  register: keys
  find:
    path: '/etc/letsencrypt/archive/'
    recurse: yes
    patterns: 'privkey*'

- name: Make sure the private keys are owned by the root user
  tags: cert
  file:
    path: '{{ file.path }}'
    owner: root
    group: root
  with_items:
    - '{{ keys.files | list }}'
  loop_control:
    loop_var: file

- name: Make sure the private keys are accessible by the root user
  tags: cert
  acl:
    path: '{{ file.path }}'
    etype: user
    permissions: rw
    state: present
    recalculate_mask: no_mask
  with_items:
    - '{{ keys.files | selectattr("mode", "eq", "0644") | list }}'
  loop_control:
    loop_var: file

- name: Make sure the private keys are not accessible by any group
  tags: cert
  acl:
    path: '{{ file.path }}'
    etype: group
    permissions: '-'
    state: present
    recalculate_mask: no_mask
  with_items:
    - '{{ keys.files | selectattr("mode", "eq", "0644") | list }}'
  loop_control:
    loop_var: file

- name: Make sure the private keys are not accessible by any other user
  tags: cert
  acl:
    path: '{{ file.path }}'
    etype: other
    permissions: '-'
    state: present
    recalculate_mask: no_mask
  with_items:
    - '{{ keys.files | selectattr("mode", "eq", "0644") | list }}'
  loop_control:
    loop_var: file

# Align with certbot's default access rights for the archive and live
# directories. Use the acl module to avoid resetting the mask, so that any
# existing ACL rules are preserved.
- name: Make sure the archive and live directories are owned by root
  file:
    path: '{{ path }}'
    state: directory
    owner: root
    group: root
  with_items:
    - /etc/letsencrypt/archive
    - /etc/letsencrypt/live
  loop_control:
    loop_var: path

- name: Make sure the archive and live directories are not accessible by any group
  acl:
    path: '{{ path }}'
    etype: group
    permissions: '-'
    recursive: false
    state: present
    recalculate_mask: no_mask
  with_items:
    - /etc/letsencrypt/archive
    - /etc/letsencrypt/live
  loop_control:
    loop_var: path

- name: Make sure the archive and live directories are not accessible by any other user
  acl:
    path: '{{ path }}'
    etype: other
    permissions: '-'
    recursive: false
    state: present
    recalculate_mask: no_mask
  with_items:
    - /etc/letsencrypt/archive
    - /etc/letsencrypt/live
  loop_control:
    loop_var: path

- name: Open the port 80 if necessary
  tags: security, cert
  register: ufw_http
  ufw:
    proto: tcp
    rule: limit
    src: any
    port: 80
    comment: Allow LetsEncrypt temporarily

- name: Create all the certificates
  include_tasks: create-one.yml
  loop: '{{ certificates | selectattr("create", "equalto", true) | list }}'
  loop_control:
    loop_var: certificate

- name: Remove the firewall rule if it has been added
  tags: security, cert
  when: ufw_http.changed
  ufw:
    proto: tcp
    rule: limit
    src: any
    port: 80
    delete: yes
    comment: Allow LetsEncrypt temporarily

# In this direction, we should overwrite the symbolic links,
# in case the certificates have been renewed
# We force the permissions to 755 for dirs and 600 for files
- name: Backup the certificates on your local machine
  when: (system.devel and devel.acme_server == 'staging') or system.keep_certs
  tags: cert,sync
  synchronize:
    mode: pull
    src: /etc/letsencrypt
    dest: '{{ backup_directory }}/certificates/'
    perms: yes
    rsync_opts:
      - '--no-motd'
      - '--exclude=readme.md'
      - '--exclude=renewal-hooks'
      - '--update'
      - '--chmod=D0755,F0600'
