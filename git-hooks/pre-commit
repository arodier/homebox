#!/usr/bin/dash
#
## Pre-commit git hook script.
##
## Make sure you have installed the following components:
##
## - mdl (markdown lint)
## - asible-lint
## - tee
## - yamllint
## - colorize (optional, better terminal output)
##
## The script will check the validity of the staged files.
## I am aware that some staged files may not be staged to the last version,
## but that the script will check the version on disk, i.e. the last one.
## This is a minor inconvenience for 1) The sake of simplicity of the script,
## 2) You are likely to commit the last version anyway and might be a mistake,
## and 3) ansible-lint may need to recurse into the original hierarchy,
## especially when using include_role
##
## Install the script using the command:
## ln -s git-hooks/pre-commit .git/hooks/pre-commit
#

# Status codes
SUCCESS=0
SYSTEM_ERROR=10
LINT_ERROR=20

# Default status
lint_result=$SUCCESS

usage() {
    sed -En 's/^## ?//p' "$0"
}

if [ "$1" = "-h" ] || [ "$1" = "--help" ]; then
    usage
    exit $SUCCESS
fi

# Check that all the commans are installed
for command in ansible-lint yamllint mdl tee; do
    if ! $command --version >/dev/null 2>&1; then
        echo "Failed to exec '$command --version' !" >&2
        usage
        exit $SYSTEM_ERROR
    fi
done

# Convenience function to display a text in bold
# tput seem to randomly work
if colorize -V >/dev/null 2>&1; then

    title() {
        read text
        echo ""
        echo "$text" | colorize Default
    }

else

    title() {
        read text
        echo "$text"
    }

fi

# Initial error counts
ansible_errors=0
markdown_errors=0
yaml_errors=0

# Run from the parent directory
script_file=$(readlink -f "$0")
script_dir=$(dirname "$script_file")
root_dir="$script_dir/.."

# From .git/hooks/pre-commit.sample
if git rev-parse --verify HEAD >/dev/null 2>&1;then
    against=HEAD
else
    # Initial commit: diff against an empty tree object
    against=$(git hash-object -t tree /dev/null)
fi

# If there are whitespace errors or leftover merge conflicts markers,
# print the offending file names and fail.
git diff-index --check --cached "$against" --

printf "Diff against revision '%s'" "$against" | title

# Create a temporary file to list ansible files to check
ansible_files=$(mktemp)

# Write the list of modified ansible YAML files to be committed
git diff-index --cached --name-only --diff-filter=ACMR -z "$against" -- \
    "$root_dir/playbooks/*.yml" \
    "$root_dir/roles/**/*.yml" \
    ":(exclude)*/files/*.yml" \
    ":(exclude)*/templates/*.yml" \
    | tr '\0' '\n' >"$ansible_files"

# Display the number of files to check
nb_files=$(wc -w "$ansible_files" | cut -f 1 -d ' ')

if [ "$nb_files" = "0" ]; then

    echo "No ansible files staged" | title

else

    printf "%d Ansible files to check:\n" "$nb_files" | title


    # Restart from an empty file
    log_file="$root_dir/logs/ansible-lint.log"
    truncate --size 0 "$log_file"

    file_checked=0

    while read -r file; do

        file_checked=$((file_checked + 1))

        printf "[%02d/%02d] Checking file '%s': " "$file_checked" "$nb_files" "$file"

        status=$(ansible-lint --force-color "$file" 2>&1 | tee -a "$log_file")

        if expr "$status" : ".*ANSIBLE_LINT_ERROR.*" >/dev/null; then

            lint_result=$LINT_ERROR
            echo "Error(s)"

            ansible_errors=$((ansible_errors + 1))

        elif expr "$status" : ".*WARNING.*" >/dev/null; then

            lint_result=$LINT_ERROR
            echo "Warning(s)"

            ansible_errors=$((ansible_errors + 1))

        else
            echo "OK"
        fi

    done < "$ansible_files"

    if [ "$lint_result" != "$SUCCESS" ]; then
        echo "Errors found:"
        cat "$log_file"
    fi
fi

# Display the number of files to check
markdown_files=$(mktemp)

# Write the list of modified ansible YAML files to be committed
git diff-index --cached --name-only --diff-filter=ACMR -z "$against" -- \
    "$root_dir/docs/**/*.md" \
    | tr '\0' '\n' >"$markdown_files"

nb_files=$(wc -w "$markdown_files" | cut -f 1 -d ' ')

if [ "$nb_files" = "0" ]; then

    echo "No markdown files to check" | title

else

    printf "%d Markdown files to check:" "$nb_files"  | title

    # Restart from an empty file
    log_file="$root_dir/logs/markdown-lint.log"
    truncate --size 0 "$log_file"

    file_checked=0

    while read -r path; do

        file_checked=$((file_checked + 1))

        printf "[%02d/%02d] Checking file '%s': " "$file_checked" "$nb_files" "$path"
        filename=$(basename "$path")

        status=$(mdl "$path" 2>&1 | tee -a "$log_file")

        if [ "$status" != "" ]; then
            lint_result=$LINT_ERROR
            echo "Fails"
            echo "$status" | sed -En "s/.*$filename:(.*)/  line \\1/p"
            echo ""
            markdown_errors=$((markdown_errors + 1))
        else
            echo "OK"
        fi

    done < "$markdown_files"

fi

# Create a temporary file to list ansible files to check
yaml_files=$(mktemp)

# Write the list of modified ansible YAML files to be committed
git diff-index --cached --name-only --diff-filter=ACMR -z "$against" -- \
    "$root_dir/config/*.yml" \
    "$root_dir/config/**/*.yml" \
    | tr '\0' '\n' > "$yaml_files"

nb_files=$(wc -w "$yaml_files" | cut -f 1 -d ' ')

if [ "$nb_files" = "0" ]; then

    echo "No YAML files to check" | title

else

    printf "%d YAML files to check:\n" "$nb_files" | title

    # Restart from an empty file
    log_file="$root_dir/logs/yaml-lint.log"
    truncate --size 0 "$log_file"

    file_checked=0

    while read -r path; do

        file_checked=$((file_checked + 1))

        printf "[%02d/%02d] Checking file '%s': " "$file_checked" "$nb_files" "$path"
        filename=$(basename "$path")

        status=$(yamllint --strict -c "$root_dir/config/yaml-lint.yml" "$path" 2>&1 | tee -a "$log_file")

        if [ "$status" != "" ]; then
            lint_result=$LINT_ERROR
            echo "Fails"
            echo "$status" | sed -En "s/.*$filename:(.*)/  line \\1/p"
            echo ""
            yaml_errors=$((yaml_errors + 1))
        else
            echo "OK"
        fi

    done < "$yaml_files"
fi

echo "Summary" | title

printf "Ansible errors:  %d" "$ansible_errors"
if [ "$ansible_errors" -gt "0" ]; then
    echo "    (Check logs/ansible-lint.log)"
else
    echo ""
fi

printf "markdown errors: %d" "$markdown_errors"
if [ "$markdown_errors" -gt "0" ]; then
    echo "    (Check logs/markdown-lint.log)"
else
    echo ""
fi

printf "yaml errors:     %d" "$yaml_errors"
if [ "$yaml_errors" -gt "0" ]; then
    echo "    (Check logs/yaml-lint.log)"
else
    echo ""
fi

exit $lint_result
