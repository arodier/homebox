#!/bin/sh
#
## This is the git pre-hook script, executed before pushing on remote.
## The git pre-push hook uses ansible-lint to validate ansible playbooks YAML
## files on commits.
## - Make sure ansible-lint is installed
#

set -e

# Manually added options to skip to the command line.
# ansible-lint seem to ignore them in the configuration file

# From .git/hooks/pre-push.sample
# Not used for now
# remote="$1"
# url="$2"
z40=0000000000000000000000000000000000000000

# Check if ansible-lint is usable
if ! ansible-lint --version >/dev/null 2>&1; then
    sed -En 's/^## //p' $0
    exit 1
fi

# Initialise variables
git_top_level=$(git rev-parse --show-toplevel)

# Create the logs directory if not exists. It is ignored by git anyway
test -d logs || mkdir logs

while read -r local_ref local_sha _ _     # remote_ref and remote_sha are not used
do
    # Handle delete
    if [ "$local_sha" = $z40 ]; then
        # Do not run ansible-lint on the branch to be deleted
        :
        # Continue processing the next branch if any
        continue
    fi

    echo "Let's check files with ansible-lint"

    # Create a temporary file to list ansible files to check
    tmp_checklist=$(mktemp)

    # Write the list of the main ansible files and directories
    find \
        roles/* \
        -maxdepth 0 -print0 \
        > "$tmp_checklist"

    # Create a temporary directory
    tmp_dir="$(mktemp -d)"

    # Set the log file
    log_file="${git_top_level}/logs/ansible-lint-pre-push.log"

    # Export the branch to the temporary directory
    echo "Exporting $local_ref to $tmp_dir"
    git archive "$local_sha" | tar -x -C "$tmp_dir" || exit $?

    # Use a subshell to get to the temporary directory, run ansible-lint
    # with a different error handling, and remember the exit status of the
    # xargs call if any error
    lint_result=0
    (
        cd "$tmp_dir"

        # Do not exit on error until the end of the subshell
        set +e

        echo "Running ansible-lint on all playbooks"
        echo "Full log is being written to $log_file"

        # shellcheck disable=SC2016
        xargs -0 -I {} \
            sh -c 'PYTHONUNBUFFERED=1 ansible-lint -q -x 106,207,208 "$1" 2>&1' -- "{}" \
            < "$tmp_checklist" \
            > "$log_file"

        # Back to: set -e
    ) || lint_result=$?

    # Remove the temporary directory
    rm -rf "$tmp_dir"

    # Remove the temporary checklist file
    rm -f "$tmp_checklist"

    case "$lint_result" in
        "0")
            if grep --color=auto -h -e 'WARNING:' "$log_file" >&2
            then
                echo "Please address the ansible-lint warnings"
                exit 1
            fi
            echo "Looks good for ansible-lint"
            # Continue processing the next branch if any
            ;;
        "123")
            grep --color=auto -h -A 11 -e 'Syntax Error' "$log_file" >&2 || true
            grep --color=auto -h -e '\[E...]' "$log_file" >&2 || true
            grep --color=auto -h -e 'WARNING:' "$log_file" >&2 || true
            echo "Please fix the ansible-lint errors and warnings"
            exit $lint_result
            ;;
        *)
            echo >&2 "Sorry, something wrong happened"
            exit $lint_result
            ;;
    esac
done

exit 0
