---
# Requires the following role parameters:
# - `cert_dir`: name of the per FQDN directory;
# - `entity_group` : name of the entity accessing the certificate;
# - `access_private_key` : boolean value to indicate if the entity requires
# access to the private key.

- name: Get the certificates list
  register: certs
  find:
    path: '/etc/letsencrypt/archive/{{ cert_dir }}'
    recurse: yes
    patterns: 'cert*,chain*,fullchain*'

- name: Get the keys list
  register: keys
  find:
    path: '/etc/letsencrypt/archive/{{ cert_dir }}'
    recurse: yes
    patterns: 'privkey*'

- name: Set the acl for the traversal of the directory hierarchy
  tags: cert
  acl:
    path: '{{ path }}'
    entity: '{{ entity_group }}'
    etype: user
    permissions: 'x'
    recursive: false
    state: present
  with_items:
    - '/etc/letsencrypt/archive'
    - '/etc/letsencrypt/live'
    - '/etc/letsencrypt/archive/{{ cert_dir }}'
    - '/etc/letsencrypt/live/{{ cert_dir }}'
  loop_control:
    loop_var: path

# Now, we set the default acl for this directory: new certificates
# will be automatically marked as readable by the entity.
# This doesn't need to be done for nginx, as the certificates
# are read by root anyway.
- name: Set the default user acl permissions for the directory
  when: access_private_key
  tags: cert
  acl:
    path: '{{ path }}'
    entity: '{{ entity_group }}'
    etype: user
    permissions: 'r'
    recursive: false
    state: present
    default: true
  with_items:
      - '/etc/letsencrypt/archive/{{ cert_dir }}'
      - '/etc/letsencrypt/live/{{ cert_dir }}'
  loop_control:
    loop_var: path

- name: Set the default owning group acl permissions for the directory
  when: access_private_key
  tags: cert
  acl:
    path: '{{ path }}'
    etype: group
    permissions: '-'
    recursive: false
    state: present
    default: true
  with_items:
      - '/etc/letsencrypt/archive/{{ cert_dir }}'
      - '/etc/letsencrypt/live/{{ cert_dir }}'
  loop_control:
    loop_var: path

- name: Set the default other acl permissions for the directory
  when: access_private_key
  tags: cert
  acl:
    path: '{{ path }}'
    etype: other
    permissions: '-'
    recursive: false
    state: present
    default: true
  with_items:
      - '/etc/letsencrypt/archive/{{ cert_dir }}'
      - '/etc/letsencrypt/live/{{ cert_dir }}'
  loop_control:
    loop_var: path

- name: Set the default mask acl permissions for the directory
  when: access_private_key
  tags: cert
  acl:
    path: '{{ path }}'
    etype: mask
    permissions: 'r'
    recursive: false
    state: present
    default: true
  with_items:
      - '/etc/letsencrypt/archive/{{ cert_dir }}'
      - '/etc/letsencrypt/live/{{ cert_dir }}'
  loop_control:
    loop_var: path

# Create the list of files to modify: only the certificates if the entity does
# not require access to the private key.
- name: Create the list of files to modify
  when: not access_private_key
  set_fact:
    files_list: '{{ certs.files }}'

# In this case, this is a specific entity (e.g. openldap)
# we include the private key too.
- name: Create the list of files to modify
  when: access_private_key
  set_fact:
    files_list: '{{ certs.files + keys.files }}'

# Finally, we set the existing certificates ACLs to be readable by
# the entity. This is crucial, especially when restoring certificates.
- name: Set the acl for the files
  tags: cert
  acl:
    path: '{{ file.path }}'
    etype: user
    entity: '{{ entity_group }}'
    state: present
    permissions: 'r'
  with_items:
    - '{{ files_list }}'
  loop_control:
    loop_var: file
